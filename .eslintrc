{
  "extends": ["eslint:recommended", "next"],
  "root": true,
  "overrides": [
    {
      "files": ["**/*.{mjs,js,jsx,ts,tsx}"],
      "extends": ["plugin:prettier/recommended"],
      "plugins": ["import"],
      "env": { "node": true, "es6": true },
      "rules": {
        "import/order": [
          "warn",
          {
            "groups": [
              "builtin",
              "external",
              "internal",
              "sibling",
              "parent",
              "index",
              "type"
            ]
          }
        ]
      }
    },
    {
      "files": ["**/**.test.{js,jsx,ts,tsx}"],
      "extends": ["plugin:testing-library/react"],
      "env": { "jest": true, "node": true, "browser": true }
    },
    {
      "files": ["**/*.{ts,tsx}"],
      "parser": "@typescript-eslint/parser",
      "plugins": ["@typescript-eslint"],
      "globals": { "globalThis": false },
      "rules": {
        "no-unused-vars": ["error", { "argsIgnorePattern": "^_" }],
        "@typescript-eslint/consistent-type-imports": "error"
      }
    },
    {
      "files": ["**/*.tsx"],
      "rules": {
        "react/no-unused-prop-types": "off",
        "react/require-default-props": "off",
        "react/jsx-props-no-spreading": "off",
        "react-hooks/rules-of-hooks": "error",
        "react-hooks/exhaustive-deps": "warn",
        "consistent-return": "off",
        "react/destructuring-assignment": ["warn", "always"],
        "react/function-component-definition": [
          "error",
          {
            "namedComponents": "arrow-function",
            "unnamedComponents": "arrow-function"
          }
        ],
        "react/jsx-filename-extension": [
          2,
          { "extensions": [".js", ".jsx", ".ts", ".tsx"] }
        ],
        "no-restricted-syntax": [
          "error",
          {
            "selector": "ImportDeclaration[source.value='react'][specifiers.0.type='ImportDefaultSpecifier']",
            "message": "Default React import not allowed since we use the TypeScript jsx-transform. If you need a global type that collides with a React named export (such as `MouseEvent`), try using `globalThis.MouseHandler`"
          },
          {
            "selector": "ImportDeclaration[source.value='react'] :matches(ImportNamespaceSpecifier)",
            "message": "Named * React import is not allowed. Please import what you need from React with Named Imports"
          }
        ],
        "@typescript-eslint/consistent-type-definitions": ["error", "type"]
      }
    },
    {
      "files": ["**/*.{md,mdx}"],
      "extends": ["plugin:mdx/recommended"],
      "settings": { "mdx/code-blocks": false },
      "rules": { "react/jsx-no-undef": "off", "no-useless-escape": "off" }
    },
    {
      "files": [
        "pages/*/about/*.{md,mdx}",
        "pages/*/download/*.{md,mdx}",
        "pages/*/get-involved/*.{md,mdx}",
        "pages/*/docs/*.{md,mdx}",
        "pages/*/*.{md,mdx}"
      ],
      "settings": { "mdx/code-blocks": true }
    },
    {
      "files": ["pages/**/*.{md,mdx}/*.{js,jsx,cjs,mjs,ts,tsx}"],
      "rules": {
        "camelcase": "off",
        "@typescript-eslint/no-unused-vars": "off",
        "consistent-return": "off",
        "func-names": "off",
        "import/extensions": "off",
        "import/no-extraneous-dependencies": "off",
        "import/no-unresolved": "off",
        "no-console": "off",
        "no-empty": "off",
        "no-restricted-globals": "off",
        "no-restricted-syntax": "off",
        "no-undef": "off",
        "no-underscore-dangle": "off",
        "no-unused-expressions": "off",
        "no-unused-vars": "off",
        "prefer-promise-reject-errors": "off"
      }
    },
    {
      "files": ["**/*.stories.{ts,tsx}"],
      "rules": {
        "import/no-anonymous-default-export": "off"
      }
    }
  ]
}
