# Security Notes
# Only selected Actions are allowed within this repository. Please refer to (https://github.com/nodejs/nodejs.org/settings/actions)
# for the full list of available actions. If you want to add a new one, please reach out a maintainer with Admin permissions.
# REVIEWERS, please always double-check security practices before merging a PR that contains Workflow changes!!
# AUTHORS, please only use actions with explicit SHA references, and avoid using `@master` or `@main` references or `@version` tags.

name: Build and Analysis Checks

on:
  push:
    branches:
      - main
  pull_request:

defaults:
  run:
    # This ensures that the working directory is the root of the repository
    working-directory: ./

permissions:
  contents: read
  actions: read
  # This permission is required by `peter-evans/create-or-update-comment`
  pull-requests: write

jobs:
  base:
    name: Base Tasks
    runs-on: ubuntu-latest
    outputs:
      turbo_args: ${{ steps.turborepo_arguments.outputs.turbo_args }}

    steps:
      - name: Provide Turborepo Arguments
        id: turborepo_arguments
        # We also set the Turborepo Cache to the `.turbo` folder
        # See https://turbo.build/repo/docs/reference/command-line-reference/run#--cache-dir
        # See https://turbo.build/repo/docs/reference/command-line-reference/run#--force
        run: echo "turbo_args=--force=true --cache-dir=.turbo" >> "$GITHUB_OUTPUT"

  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [base]

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
      - name: Git Checkout (`base_ref`)
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          # We only need to fetch the last commit from the base_ref
          # for installing our dependencies in safe mode and other safe operations
          fetch-depth: 1
          # This ensures we're checkint out the base_ref and not the pull request codebase
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Restore Cache
        uses: actions/cache/restore@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8
        with:
          path: |
            .turbo
            .next/cache
            node_modules/.cache
          # We want to restore cache from local .npm caches, .next/cache and node_modules/.cache
          # As this should reduce build times, and the overall time for installing packages or running operations
          key: cache-${{ hashFiles('package-lock.json') }}-
          restore-keys: |
            cache-${{ hashFiles('package-lock.json') }}-
            cache-

      - name: Set up Node.js
        uses: actions/setup-node@e33196f7422957bea03ed53f6fbb155025ffc7b8
        with:
          # We want to ensure that the Node.js version running here respects our supported versions
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install NPM packages (`base_ref`)
        # We want to avoid NPM from running the Audit Step and Funding messages on a CI environment
        # We also use `npm i` instead of `npm ci` so that the node_modules/.cache folder doesn't get deleted
        run: npm i --no-audit --no-fund

      - name: Git Checkout (`head_sha`)
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          # We only need to fetch the last commit from the head_ref
          # since we're not using the `--filter` operation from turborepo
          fetch-depth: 1
          # Since we use the `pull_request_target` event we want to checkout the current ref as by default this
          # command will checkout `main` instead of the current pull_request ref
          # We checkout the head.sha to get the latest commit, instead of head.ref that gives the current ref of the branch
          ref: ${{ github.event.pull_request.head.sha }}
          # We do not want to cleanup after already checking out base branch
          clean: false

      - name: Install NPM packages (`head_sha`)
        # We want to ignore-scripts from code checked out from the user as it might be dangerous
        run: npm i --no-audit --no-fund --ignore-scripts --userconfig=/dev/null

      - name: Build Next.js
        # We want to enforce that the actual `turbo@latest` package is used instead of a possible hijack from the user
        # the `${{ needs.base.outputs.turbo_args }}` is a string substitution happening from the base job
        run: npm exec --package=turbo@latest -- turbo build ${{ needs.base.outputs.turbo_args }}
        env:
          # We want to ensure we have enough RAM allocated to the Node.js process
          # this should be a last resort in case by any chances the build memory gets too high
          # but in general this should never happen
          NODE_OPTIONS: '--max_old_space_size=4096'
          # We want to avoid having Next.js's Telemetry to kick-in during this build
          # See https://nextjs.org/telemetry
          NEXT_TELEMETRY_DISABLED: 1

      - name: Analyse Build
        # We generate a Bundle Analysis Report
        # See https://github.com/hashicorp/nextjs-bundle-analysis
        run: npm exec --package=nextjs-bundle-analysis@0.5.0 report

      - name: Upload Build Analysis
        # We upload the Bundle Analysis Artifact to be used on the next step
        uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
        with:
          name: bundle-analysis
          path: .next/analyze/__bundle_analysis.json

      - name: Save Cache
        # We only save Job caches on the Build Step as it's the only one that produces cache
        # because it contains relevant Next.js's cache metadata
        uses: actions/cache/save@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8
        with:
          path: |
            .next/cache
            node_modules/.cache
          # Most of sibling Pull Requests will use the cache key based on the package-lock.json
          # We do also add a hashFiles for `.next/cache` as GitHub Actions only allows
          # One cache with same key to exist, so to ensure we always have a cache from the latest build
          # We add the hashFiles of `.next/cache` to the cache key of the Cache Entry
          key: cache-${{ hashFiles('package-lock.json') }}-${{ hashFiles('.next/cache/**') }}

  analysis:
    name: Analysis
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Git Checkout (`base_ref`)
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          # We only need to fetch the latest commit of the `base_ref` here for the analysis steps
          fetch_depth: 1
          # For this step we don't need to checkout on the userland codebase
          # As we can simply checkout on the latest commit of the `base_ref` for the analysis steps
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Download PR Bundle Analysis
        # This Step is Auto Generated by https://github.com/hashicorp/nextjs-bundle-analysis
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
        with:
          name: bundle-analysis
          path: .next/analyze

      - name: Download Base Bundle Analysis
        # This Step is Auto Generated by https://github.com/hashicorp/nextjs-bundle-analysis
        uses: dawidd6/action-download-artifact@246dbf436b23d7c49e21a7ab8204ca9ecd1fe615
        if: success() && github.event.number
        with:
          name: bundle-analysis
          branch: ${{ github.event.pull_request.base.ref }}
          path: .next/analyze/base/bundle
          if_no_artifact_found: warn

      - name: Check Base Bundle Analysis File
        # This Step is Auto Generated by https://github.com/hashicorp/nextjs-bundle-analysis
        id: check-base-bundle-analysis-file
        uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b
        with:
          files: .next/analyze/base/bundle/__bundle_analysis.json

      - name: Copy PR Bundle Analysis (Fallback)
        # In case a Analysis of the base branch does not exist, we don't want to fail the CI action
        # Hence we simply fallback to the Bundle Analysis of the current Build
        if: steps.check-base-bundle-analysis-file.outputs.files_exists == 'false'
        run: |
          mkdir -p .next/analyze/base/bundle/
          cp .next/analyze/__bundle_analysis.json .next/analyze/base/bundle/__bundle_analysis.json

      - name: Compare Analysis Bundle (Base vs HEAD)
        # This Step is Auto Generated by https://github.com/hashicorp/nextjs-bundle-analysis
        if: success() && github.event.number
        run: ls -laR .next/analyze/base && npx -p nextjs-bundle-analysis compare

      - name: Generate Bundle Analysis Comment
        # This Step is Auto Generated by https://github.com/hashicorp/nextjs-bundle-analysis
        id: get-comment-body
        if: success() && github.event.number
        run: |
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$(cat .next/analyze/__bundle_analysis_comment.txt)" >> $GITHUB_OUTPUT
          echo EOF >> $GITHUB_OUTPUT

      - name: Find Existing Bundle Analysis Comment
        # This Step is Auto Generated by https://github.com/hashicorp/nextjs-bundle-analysis
        uses: peter-evans/find-comment@a54c31d7fa095754bfef525c0c8e5e5674c4b4b1
        if: success() && github.event.number
        id: find-comment-id
        with:
          issue-number: ${{ github.event.number }}
          body-includes: '<!-- __NEXTJS_BUNDLE_nodejs.org -->'

      - name: Create Bundle Analysis Comment (if does not exist)
        # This Step is Auto Generated by https://github.com/hashicorp/nextjs-bundle-analysis
        uses: peter-evans/create-or-update-comment@c6c9a1a66007646a28c153e2a8580a5bad27bcfa
        if: success() && github.event.number && steps.find-comment-id.outputs.comment-id == 0
        with:
          issue-number: ${{ github.event.number }}
          body: ${{ steps.get-comment-body.outputs.body }}

      - name: Update Bundle Analysis Comment (if does exist)
        # This Step is Auto Generated by https://github.com/hashicorp/nextjs-bundle-analysis
        uses: peter-evans/create-or-update-comment@c6c9a1a66007646a28c153e2a8580a5bad27bcfa
        if: success() && github.event.number && steps.find-comment-id.outputs.comment-id != 0
        with:
          issue-number: ${{ github.event.number }}
          body: ${{ steps.get-comment-body.outputs.body }}
          comment-id: ${{ steps.find-comment-id.outputs.comment-id }}
          edit-mode: replace
