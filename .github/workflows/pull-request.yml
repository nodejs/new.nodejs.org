# Security Notes
# Only selected Actions are allowed within this repository. Please refer to (https://github.com/nodejs/nodejs.org/settings/actions)
# for the full list of available actions. If you want to add a new one, please reach out a maintainer with Admin permissions.
# REVIEWERS, please always double-check security practices before merging a PR that contains Workflow changes!!
# AUTHORS, please only use actions with explicit SHA references, and avoid using `@master` or `@main` references or `@version` tags.

name: Pull Request Checks

on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main
    types:
      - labeled
  merge_group:

defaults:
  run:
    # This ensures that the working directory is the root of the repository
    working-directory: ./

permissions:
  contents: read
  actions: read
  # This permission is required by `MishaKav/jest-coverage-comment`
  pull-requests: write

jobs:
  # This Job removes the label after it got applied to ensure that we can easily apply again when needed
  remove_pull_request_label:
    if: |
      github.event_name == 'pull_request_target' &&
      github.event.label.name == 'github_actions:pull-request'

    name: Remove Pull Request Label
    runs-on: ubuntu-latest
    steps:
      - name: Remove GitHub Actions Label
        uses: actions-ecosystem/action-remove-labels@2ce5d41b4b6aa8503e285553f75ed56e0a40bae0
        with:
          labels: github_actions:pull-request

  base:
    # This Job should run either on `merge_groups` or `push` events
    # or `pull_request_target` event with a `labeled` action with a label named `github_actions:pull-request`
    if: |
      (github.event_name == 'push' || github.event_name == 'merge_group') ||
      (github.event_name == 'pull_request_target' &&
        github.event.label.name == 'github_actions:pull-request')

    name: Base Tasks
    runs-on: ubuntu-latest
    outputs:
      turbo_args: ${{ steps.turborepo_arguments.outputs.turbo_args }}

    steps:
      - name: Provide Turborepo Arguments
        id: turborepo_arguments
        # See https://turbo.build/repo/docs/reference/command-line-reference/run#--cache-dir
        # See https://turbo.build/repo/docs/reference/command-line-reference/run#--force
        run: echo "turbo_args=--force=true --cache-dir=.turbo/cache" >> "$GITHUB_OUTPUT"

  lint:
    # This Job should run either on `merge_groups` or `push` events
    # or `pull_request_target` event with a `labeled` action with a label named `github_actions:pull-request`
    if: |
      (github.event_name == 'push' || github.event_name == 'merge_group') ||
      (github.event_name == 'pull_request_target' &&
        github.event.label.name == 'github_actions:pull-request')

    name: Lint
    runs-on: ubuntu-latest
    needs: [base]

    steps:
      - name: Git Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          # Fetch from the PRs Repository instead of Node.js' repository
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
          # Since we trigger this with a Labeled Event we might not get the latest commit
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          # We need full git history for properly being able to run Chromatic
          # and since Turborepo also needs the git history to compute changes
          fetch-depth: 0

      - name: Restore Lint Cache
        uses: actions/cache/restore@704facf57e6136b1bc63b828d79edcd491f0ee84
        with:
          path: |
            .turbo/cache
            node_modules/.cache
            .eslintmdcache
            .eslintjscache
            .prettiercache
          # We want to restore Turborepo Cache and ESlint and Prettier Cache
          key: cache-lint-${{ hashFiles('package-lock.json') }}-
          restore-keys: |
            cache-lint-${{ hashFiles('package-lock.json') }}-
            cache-lint-

      - name: Set up Node.js
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          # We want to ensure that the Node.js version running here respects our supported versions
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install NPM packages
        # We want to avoid NPM from running the Audit Step and Funding messages on a CI environment
        # We also use `npm i` instead of `npm ci` so that the node_modules/.cache folder doesn't get deleted
        run: npm i --no-audit --no-fund --ignore-scripts --userconfig=/dev/null

      - name: Run `turbo lint`
        id: eslint-step
        # We only run ESLint and Prettier on `push`, `merge_group` or `pull_request_target` events
        # and if it is a `pull_request_target` event, we want to avoid running ESLint and Prettier on automated Crowdin Pull Requests
        if: |
          (github.event_name == 'push' || github.event_name == 'merge_group') ||
          (github.event_name == 'pull_request_target' &&
            github.event.pull_request.head.ref != 'chore/crowdin')
        # We want to enforce that the actual `turbo@latest` package is used instead of a possible hijack from the user
        # the `${{ needs.base.outputs.turbo_args }}` is a string substitution happening from the base job
        run: npx --package=turbo@latest -- turbo lint ${{ needs.base.outputs.turbo_args }}

      - name: Run `turbo prettier`
        if: steps.eslint-step.outcome == 'success'
        # We want to enforce that the actual `turbo@latest` package is used instead of a possible hijack from the user
        # the `${{ needs.base.outputs.turbo_args }}` is a string substitution happening from the base job
        run: npx --package=turbo@latest -- turbo prettier ${{ needs.base.outputs.turbo_args }}

      - name: Run `tsc build`
        # We want to check that all TypeScript checks are working as expected
        run: npx --package=typescript@latest -- tsc --build .

      - name: Save Lint Cache
        # We only want to save caches on `push` events or `pull_request_target` events
        # and if it is a `pull_request_target` event, we want to avoid saving the cache if the PR comes from Dependabot
        # or if it comes from an automated Crowdin Pull Request
        if: |
          github.event_name == 'push' ||
          (github.event_name == 'pull_request_target' &&
            startsWith(github.event.pull_request.head.ref, 'dependabot/') == false &&
            github.event.pull_request.head.ref != 'chore/crowdin')
        uses: actions/cache/save@704facf57e6136b1bc63b828d79edcd491f0ee84
        with:
          path: |
            .turbo/cache
            node_modules/.cache
            .eslintmdcache
            .eslintjscache
            .prettiercache
          key: cache-lint-${{ hashFiles('package-lock.json') }}-${{ hashFiles('.turbo/cache/**') }}

  tests:
    # This Job ensures that these jobs run either on regular Pull Request Updates
    # Or if the PR gets labeled with `github_actions:pull-request`
    if: |
      github.event_name == 'merge_group' ||
      (github.event_name == 'pull_request_target' &&
        github.event.label.name == 'github_actions:pull-request')

    name: Tests
    runs-on: ubuntu-latest
    needs: [base]

    environment:
      name: Storybook
      url: ${{ steps.chromatic-deploy.outputs.storybookUrl }}

    steps:
      - name: Git Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          # Fetch from the PRs Repository instead of Node.js' repository
          repository: ${{ github.event.pull_request.head.repo.full_name || github.repository }}
          # Since we trigger this with a Labeled Event we might not get the latest commit
          ref: ${{ github.event.pull_request.head.ref || github.ref }}
          # We need full git history for properly being able to run Chromatic
          # and since Turborepo also needs the git history to compute changes
          fetch-depth: 0

      - name: Restore Tests Cache
        uses: actions/cache/restore@704facf57e6136b1bc63b828d79edcd491f0ee84
        with:
          path: |
            .turbo/cache
            node_modules/.cache
          # We want to restore Turborepo Cache and Storybook Cache
          key: cache-tests-${{ hashFiles('package-lock.json') }}-
          restore-keys: |
            cache-tests-${{ hashFiles('package-lock.json') }}-
            cache-tests-

      - name: Set up Node.js
        uses: actions/setup-node@5e21ff4d9bc1a8cf6de233a3057d20ec6b3fb69d
        with:
          # We want to ensure that the Node.js version running here respects our supported versions
          node-version-file: '.nvmrc'
          cache: 'npm'

      - name: Install NPM packages
        # We want to avoid NPM from running the Audit Step and Funding messages on a CI environment
        # We also use `npm i` instead of `npm ci` so that the node_modules/.cache folder doesn't get deleted
        run: npm i --no-audit --no-fund --userconfig=/dev/null

      - name: Run Unit Tests
        # This ID is used by the Jest Coverage Comment step
        id: unit-tests
        # Skips a few steps if not on a Pull Request (Merge Group) or it is a Dependabot PR
        # i.e. if the Event is a Merge Queue Event
        # We also don't need to run a Storybook Build on a Crowdin PR
        if: |
          github.event_name == 'pull_request_target' &&
          startsWith(github.event.pull_request.head.ref, 'dependabot/') == false &&
          github.event.pull_request.head.ref != 'chore/crowdin'
        # We want to enforce that the actual `turbo@latest` package is used instead of a possible hijack from the user
        # the `${{ needs.base.outputs.turbo_args }}` is a string substitution happening from the base job
        run: npx --package=turbo@latest -- turbo test:unit ${{ needs.base.outputs.turbo_args }} -- --ci --coverage

      - name: Start Visual Regression Tests (Chromatic)
        # This assigns the Environment Deployment for Storybook
        id: chromatic-deploy
        # Skips a few steps if not on a Pull Request (Merge Group) or it is a Dependabot PR
        # i.e. if the Event is a Merge Queue Event
        # We also don't need to run a Storybook Build on a Crowdin PR
        if: |
          github.event_name == 'pull_request_target' &&
          startsWith(github.event.pull_request.head.ref, 'dependabot/') == false &&
          github.event.pull_request.head.ref != 'chore/crowdin'
        uses: chromaui/action@v1
        with:
          buildScriptName: storybook:build
          ignoreLastBuildOnBranch: true
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          exitOnceUploaded: true

      - name: Jest Coverage Comment
        # This prevents this step from running if "Unit Tests" got cancelled; Which gets cancelled if
        # the current branch comes from Dependabot or the Event is not a Pull Request (i.e. Merge Queue Event)
        if: steps.unit-tests.outcome == 'success'
        # This comments the current Jest Coverage Report containing JUnit XML reports
        # and a Code Coverage Summary
        uses: MishaKav/jest-coverage-comment@41b5ca01d1250de84537448d248b8d18152cb277
        with:
          title: 'Unit Test Coverage Report'
          junitxml-path: ./junit.xml
          junitxml-title: Unit Test Report

      - name: Save Tests Cache
        # This prevents this step from running if "Unit Tests" got cancelled; Which gets cancelled if
        # the current branch comes from Dependabot or the Event is not a Pull Request (i.e. Merge Queue Event)
        if: steps.unit-tests.outcome == 'success'
        uses: actions/cache/save@704facf57e6136b1bc63b828d79edcd491f0ee84
        with:
          path: |
            .turbo/cache
            node_modules/.cache
          key: cache-tests-${{ hashFiles('package-lock.json') }}-${{ hashFiles('.turbo/cache/**') }}
