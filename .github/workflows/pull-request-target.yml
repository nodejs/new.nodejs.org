# Security Notes
# This workflow uses `pull_request_target`, so will run against all PRs automatically (without approval), be careful with allowing any user-provided code to be run here
# Only selected Actions are allowed within this repository. Please refer to (https://github.com/nodejs/nodejs.org/settings/actions)
# for the full list of available actions. If you want to add a new one, please reach out a maintainer with Admin permissions.
# REVIEWERS, please always double-check security practices before merging a PR that contains Workflow changes!!
# AUTHORS, please only use actions with explicit SHA references, and avoid using `@master` or `@main` references or `@version` tags.
# MERGE QUEUE NOTE: This Workflow does not run on `merge_group` trigger, as this Workflow is not required for Merge Queue's
# The main purpose of this Workflow is to decorate the Pull Request with important information for a Pull Request
# On a merge queue the Pull Request already got approved!

name: Pull Requests Target Checks

on:
  pull_request_target:
    branches:
      - main
    types:
      - labeled
      - opened
      - reopened
      - synchronize

permissions:
  contents: read
  actions: read
  # This permission is required by `peter-evans/create-or-update-comment`
  # This permission is required by `MishaKav/jest-coverage-comment`
  pull-requests: write

defaults:
  run:
    # This ensures that the working directory is the root of the repository
    working-directory: ./

jobs:
  coverage-report:
    # This Ensures that these jobs are not run within Dependabot Checks
    # And that they're run either on regular Pull Request Updates
    # Or if the PR gets labeled with `github_actions:pull-request`
    if: |
      startsWith(github.event.pull_request.head.ref, 'dependabot/') == false &&
      (github.event.action != 'labeled' || (github.event.action == 'labeled' && github.event.label.name == 'github_actions:pull-request'))

    name: Test Coverage Report
    runs-on: ubuntu-latest

    steps:
      - name: Git Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          # We only need to fetch the latest commit of the `base_ref` here for the analysis steps
          fetch-depth: 1
          # For this step we don't need to checkout on the userland codebase
          # As we can simply checkout on the latest commit of the `base_ref` for the analysis steps
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Wait for Tests to Finish
        uses: lewagon/wait-on-check-action@e106e5c43e8ca1edea6383a39a01c5ca495fd812
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'Tests'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

      - name: Download PR Coverage Report
        uses: dawidd6/action-download-artifact@246dbf436b23d7c49e21a7ab8204ca9ecd1fe615
        with:
          name: coverage-report
          workflow: pull-request.yml
          commit: ${{ github.event.pull_request.head.sha }}
          if_no_artifact_found: fail

      - name: Jest Coverage Comment
        # This comments the current Jest Coverage Report containing JUnit XML reports
        # and a Code Coverage Summary
        uses: MishaKav/jest-coverage-comment@41b5ca01d1250de84537448d248b8d18152cb277
        with:
          title: 'Unit Test Coverage Report'
          junitxml-path: ./junit.xml
          junitxml-title: Unit Test Report

  visual-regression:
    # This Ensures that these jobs are not run within Dependabot Checks
    # And that they're run either on regular Pull Request Updates
    # Or if the PR gets labeled with `github_actions:pull-request`
    if: |
      startsWith(github.event.pull_request.head.ref, 'dependabot/') == false &&
      (github.event.action != 'labeled' || (github.event.action == 'labeled' && github.event.label.name == 'github_actions:pull-request'))

    name: Visual Regression Upload
    runs-on: ubuntu-latest

    environment:
      name: Storybook
      url: ${{ steps.chromatic-deploy.outputs.storybookUrl }}

    steps:
      - name: Git Checkout
        uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9
        with:
          # Here we need a full git history apparently because Chromatic CLI
          # can't make precise git tree comparisons
          fetch-depth: 0
          # For this step we don't need to checkout on the userland codebase
          # As we can simply checkout on the latest commit of the `base_ref` for the analysis steps
          ref: ${{ github.event.pull_request.base.ref }}

      - name: Wait for Tests to Finish
        uses: lewagon/wait-on-check-action@e106e5c43e8ca1edea6383a39a01c5ca495fd812
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          check-name: 'Tests'
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          wait-interval: 30

      - name: Download PR Storybook Build
        uses: dawidd6/action-download-artifact@246dbf436b23d7c49e21a7ab8204ca9ecd1fe615
        with:
          name: storybook-build
          workflow: pull-request.yml
          commit: ${{ github.event.pull_request.head.sha }}
          path: storybook-static
          if_no_artifact_found: fail

      - name: Start Visual Regression Tests (Chromatic)
        id: chromatic-deploy
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          storybookBuildDir: storybook-static
          exitOnceUploaded: true
          onlyChanged: true
